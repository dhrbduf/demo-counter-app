pipeline{

    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndestory\ndestoryekscluster', description: 'Create/Update or destory the eks cluster')
        string(name: 'cluster', defaultValue: 'OKY-DEV-EKS-Cluster', description: 'EKS Cluster Name')
        string(name: 'region', defaultValue: 'ap-northeast-2', description: 'EKS Cluster Region')
    }

    environment{
        ACCESS_KEY = credentials('aws_access_key_id')
        SECRET_KEY = credentials('aws_secret_access_key')
    }

    stages{
        stage('git checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/dhrbduf/demo-counter-app.git'    
            }
        }

        stage('EKS Connect'){
            steps{
                sh """
                    aws configure set aws_access_key_id "$ACCESS_KEY"
                    aws configure set aws_secret_access_key "$SECRET_KEY"
                    aws configure set region ""
                    aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                """;

            }
        }

        stage('EKS Deployments'){
            when { expression { params.action == 'create'}}
            steps{
                script{
                    def apply = false
                    try{
                        input message: 'Please Confirm the apply to initiate the deployments', ok: 'Ready to apply the config'
                        apply = true
                    }
                    catch(err){
                        apply = false
                        CurrentBuild.result= 'UNSTABLE'
                    }
                    if(apply){
                        sh """
                            kubectl apply -f .
                        """;
                    }
                }
            }
        }
        stage('Delete Deployments'){
            when { expression { params.action == 'destory'}}
            steps{
                script{
                    def destory = false
                    try{
                        input message: 'Please Confirm the destory to delete the deployments', ok: 'Ready to destory the config'
                        destory = true
                    }
                    catch(err){
                        destory = false
                        CurrentBuild.result= 'UNSTABLE'
                    }
                    if(destory){
                        sh """
                            kubectl delete -f .
                        """;
                    }
                }
            }
        }



    }

}
